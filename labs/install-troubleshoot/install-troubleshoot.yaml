apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "",
            "interface": "eth0",
            "ips": [
                "10.10.0.10"
            ],
            "default": true,
            "dns": {}
        }]
      k8s.v1.cni.cncf.io/networks-status: |-
        [{
            "name": "",
            "interface": "eth0",
            "ips": [
                "10.10.0.10"
            ],
            "default": true,
            "dns": {}
        }]
      openshift.io/scc: restricted
    creationTimestamp: "2022-09-17T10:19:16Z"
    generateName: psql-578f78ccb-
    labels:
      app: psql
      deployment: psql
      pod-template-hash: 578f78ccb
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:deployment: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"f969a84b-4bd8-49ae-a971-20d699a6d192"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"postgresql"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"POSTGRESQL_DATABASE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_USER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":5432,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:capabilities: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/lib/pgsql/data"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"psql-data"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
            f:k8s.v1.cni.cncf.io/networks-status: {}
      manager: multus
      operation: Update
      time: "2022-09-17T10:19:19Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.0.10"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2022-09-17T10:30:38Z"
    name: psql-578f78ccb-rfbg5
    namespace: install-troubleshoot
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: psql-578f78ccb
      uid: f969a84b-4bd8-49ae-a971-20d699a6d192
    resourceVersion: "74944"
    selfLink: /api/v1/namespaces/install-troubleshoot/pods/psql-578f78ccb-rfbg5
    uid: 906020bf-f869-45e3-94c9-9c6454374820
  spec:
    containers:
    - env:
      - name: POSTGRESQL_DATABASE
        value: db
      - name: POSTGRESQL_PASSWORD
        value: pass
      - name: POSTGRESQL_USER
        value: user
      image: registry.redhat.io/rhel8/postgresq-13:1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /usr/libexec/check-container
          - --live
        failureThreshold: 3
        initialDelaySeconds: 120
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: postgresql
      ports:
      - containerPort: 5432
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /usr/libexec/check-container
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
      securityContext:
        capabilities:
          drop:
          - KILL
          - MKNOD
          - SETGID
          - SETUID
        privileged: false
        runAsUser: 1000590000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/pgsql/data
        name: psql-data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-dz7pp
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: default-dockercfg-94vr7
    nodeName: master03
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000590000
      seLinuxOptions:
        level: s0:c24,c19
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - emptyDir: {}
      name: psql-data
    - name: default-token-dz7pp
      secret:
        defaultMode: 420
        secretName: default-token-dz7pp
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-09-17T10:19:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-09-17T10:19:16Z"
      message: 'containers with unready status: [postgresql]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-09-17T10:19:16Z"
      message: 'containers with unready status: [postgresql]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-09-17T10:19:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: registry.redhat.io/rhel8/postgresq-13:1
      imageID: ""
      lastState: {}
      name: postgresql
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          message: Back-off pulling image "registry.redhat.io/rhel8/postgresq-13:1"
          reason: ImagePullBackOff
    hostIP: 192.168.50.12
    phase: Pending
    podIP: 10.10.0.10
    podIPs:
    - ip: 10.10.0.10
    qosClass: Burstable
    startTime: "2022-09-17T10:19:16Z"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2022-09-17T10:19:16Z"
    labels:
      app: psql
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":5432,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:name: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-create
      operation: Update
      time: "2022-09-17T10:19:16Z"
    name: psql
    namespace: install-troubleshoot
    resourceVersion: "71341"
    selfLink: /api/v1/namespaces/install-troubleshoot/services/psql
    uid: 6bdf9db5-98a2-4431-999c-4dedd65aefc9
  spec:
    clusterIP: 172.30.189.125
    ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: psql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2022-09-17T10:19:16Z"
    generation: 1
    labels:
      app: psql
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:deployment: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:deployment: {}
            f:spec:
              f:containers:
                k:{"name":"postgresql"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"POSTGRESQL_DATABASE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":5432,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:capabilities: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/var/lib/pgsql/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"psql-data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-create
      operation: Update
      time: "2022-09-17T10:19:16Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:replicas: {}
          f:unavailableReplicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2022-09-17T10:29:17Z"
    name: psql
    namespace: install-troubleshoot
    resourceVersion: "74555"
    selfLink: /apis/apps/v1/namespaces/install-troubleshoot/deployments/psql
    uid: 6c307059-695b-4fc3-bfe7-5381c19ae230
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: psql
        deployment: psql
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: psql
          deployment: psql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_DATABASE
            value: db
          - name: POSTGRESQL_PASSWORD
            value: pass
          - name: POSTGRESQL_USER
            value: user
          image: registry.redhat.io/rhel8/postgresq-13:1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: psql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: psql-data
  status:
    conditions:
    - lastTransitionTime: "2022-09-17T10:19:16Z"
      lastUpdateTime: "2022-09-17T10:19:16Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    - lastTransitionTime: "2022-09-17T10:29:17Z"
      lastUpdateTime: "2022-09-17T10:29:17Z"
      message: ReplicaSet "psql-578f78ccb" has timed out progressing.
      reason: ProgressDeadlineExceeded
      status: "False"
      type: Progressing
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2022-09-17T10:19:16Z"
    generation: 1
    labels:
      app: psql
      deployment: psql
      pod-template-hash: 578f78ccb
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:deployment: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6c307059-695b-4fc3-bfe7-5381c19ae230"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:deployment: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:deployment: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"postgresql"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"POSTGRESQL_DATABASE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":5432,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:capabilities: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/var/lib/pgsql/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"psql-data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    name: psql-578f78ccb
    namespace: install-troubleshoot
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: psql
      uid: 6c307059-695b-4fc3-bfe7-5381c19ae230
    resourceVersion: "71349"
    selfLink: /apis/apps/v1/namespaces/install-troubleshoot/replicasets/psql-578f78ccb
    uid: f969a84b-4bd8-49ae-a971-20d699a6d192
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: psql
        deployment: psql
        pod-template-hash: 578f78ccb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: psql
          deployment: psql
          pod-template-hash: 578f78ccb
      spec:
        containers:
        - env:
          - name: POSTGRESQL_DATABASE
            value: db
          - name: POSTGRESQL_PASSWORD
            value: pass
          - name: POSTGRESQL_USER
            value: user
          image: registry.redhat.io/rhel8/postgresq-13:1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: psql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: psql-data
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: v1
  data:
    .dockercfg: 
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/service-account.name: builder
      kubernetes.io/service-account.uid: 72f89552-5290-4bb9-b26b-65550d54ce23
      openshift.io/token-secret.name: builder-token-tlw7x
      openshift.io/token-secret.value: eyJhbGciOiJSUzI1NiIsImtpZCI6IkN0enItVWFXaGlYRmdTaWkyYk1fLXBZcWpmeWRrTzJnMkxvekRWWlVxSGMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJpbnN0YWxsLXRyb3VibGVzaG9vdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJidWlsZGVyLXRva2VuLXRsdzd4Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImJ1aWxkZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI3MmY4OTU1Mi01MjkwLTRiYjktYjI2Yi02NTU1MGQ1NGNlMjMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6aW5zdGFsbC10cm91Ymxlc2hvb3Q6YnVpbGRlciJ9.EZeSvO_TVyaV4XtG_1G52mrzkCgtHH2vt40rGpHMRh5q6_3FxdmUONJMLY9Q8feMajMwUGUVeVjwIFDAknJDWbRK1QDAOtKzvEoBU5GiiKBe-dO5b7cWEr_at75JXpD3O5oqq5gUuQ4pzY3-Fc-vHvpOblUKQQ-k0u39LYxLg4R08brY81FaZiOZFcnXDcA-otBZvo7TpKHBngDTKKvUaIqzddFoMRPJGHpWZMRQgWFU7t-6RB9aaUXVuH5YWGFCi4S_zjOy3-7_hTYVjJg1nRCQdZqumub7BN50G_3k3GlLqrjn-ahLIqJCI5bhWLESzvm4iwHK62mcI6wijKR2-Q
    creationTimestamp: "2022-09-17T10:19:16Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:.dockercfg: {}
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/service-account.name: {}
            f:kubernetes.io/service-account.uid: {}
            f:openshift.io/token-secret.name: {}
            f:openshift.io/token-secret.value: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"2ac5a9e1-862c-4bc8-bf5b-90ad592dfbf3"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:type: {}
      manager: openshift-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    name: builder-dockercfg-sdrnd
    namespace: install-troubleshoot
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: false
      controller: true
      kind: Secret
      name: builder-token-tlw7x
      uid: 2ac5a9e1-862c-4bc8-bf5b-90ad592dfbf3
    resourceVersion: "71322"
    selfLink: /api/v1/namespaces/install-troubleshoot/secrets/builder-dockercfg-sdrnd
    uid: 256b0995-08f0-467c-b880-d83b56e5450d
  type: kubernetes.io/dockercfg
- apiVersion: v1
  data:
    ca.crt: 
    namespace: aW5zdGFsbC10cm91Ymxlc2hvb3Q=
    service-ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNakNDQWhxZ0F3SUJBZ0lJVHQ2VGg3TGQwbGt3RFFZSktvWklodmNOQVFFTEJRQXdOekVTTUJBR0ExVUUKQ3hNSmIzQmxibk5vYVdaME1TRXdId1lEVlFRREV4aHJkV0psTFdGd2FYTmxjblpsY2kxc1lpMXphV2R1WlhJdwpIaGNOTWpFd056RXpNVEl3T1RJd1doY05NekV3TnpFeE1USXdPVEl3V2pBM01SSXdFQVlEVlFRTEV3bHZjR1Z1CmMyaHBablF4SVRBZkJnTlZCQU1UR0d0MVltVXRZWEJwYzJWeWRtVnlMV3hpTFhOcFoyNWxjakNDQVNJd0RRWUoKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS01acHRNVjNNOHp4OHIyMVIzQXY1ZWI0bGhXazFuRQpva0lxODRBbGZNNXRDcVFKWGlSeXNSbnVrUFV2OUU3Q2JMRkRFR1RuK1ZFUXBtZ2NMVVcwd091dytHemI5cUh3CndmOWRYeXY2dUJIOUo3TGJlNkhpd1J2VURSVGsyQUJudXZNOVpMT0VKMHNkbm9DWElwTi9JWFd0OFJ1N0ZFYmMKWVlEa3ZxWmo2Z21sZk1vYXlsTWMwYmVKR3czWmtUTkpMTTNja2x4bitWQTVZWHNNL2xmTGlPZUEvNEc4R0dBMApmZjN1STNWVDREZnpIK3ZuSzhORU9kTnZiYWxMWWxQdkZ5bml0Q3N0V2ZhLzhaelk5U3llRmJ4bXZyRFN4eHhDClR3czRGVUMzclZ5SFFJQ2QyUEZ5M1hML2wzblgybVRMdE5iWjArSWlFY1RWazV1dWNCY083akVDQXdFQUFhTkMKTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk02eQpyaThlR1dsbFRlQkVCcUhqVmxOVWcxVS9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNhdXlqc2UvaGRLZXhPCm5ZUWZ1QlhrNHZRanRZTGFGVUxYdjZQV3lYVWdOc1RSYW5IR3pmdlZiVHJKRzdGbk9ML2xsNWpMNEg1cFdQSGkKZUtpU0lFR1h1V3dTd3VySnlmYUd6Q0RtemhOY1owR3IzMTVmL1JNSlAzcG5YMTZiWnM4WUlNZC9YbTZxT1NKawplTjl1QmVkOTdzS1VjRjEwMlhiSm1TWmlDL2NJVHpwc09wNUJrckt4c2xBNng2MVpJN2FnM1JCN2ltSWw3ZUxuCndTbUlvWGlZaW8vNmVYZnpiTUgzNk5LVytkYW1NL3JFbTk4SGhzYnZLeE9GSFIrQjhDanFGdXdDNVNxR2Q5ejgKY00ydFVvY0lWbmlKUHNuWGtKM1p3Wm42SUVHN2tJK1EyOS9hNTQ0SnlHMFNkQVpXa3owc1ZGU1RyNDIxNUlrdwpmZnpRcjYzWAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlEUURDQ0FpaWdBd0lCQWdJSVFYMTIxR210K0t3d0RRWUpLb1pJaHZjTkFRRUxCUUF3UGpFU01CQUdBMVVFCkN4TUpiM0JsYm5Ob2FXWjBNU2d3SmdZRFZRUURFeDlyZFdKbExXRndhWE5sY25abGNpMXNiMk5oYkdodmMzUXQKYzJsbmJtVnlNQjRYRFRJeE1EY3hNekV5TURreU1Gb1hEVE14TURjeE1URXlNRGt5TUZvd1BqRVNNQkFHQTFVRQpDeE1KYjNCbGJuTm9hV1owTVNnd0pnWURWUVFERXg5cmRXSmxMV0Z3YVhObGNuWmxjaTFzYjJOaGJHaHZjM1F0CmMybG5ibVZ5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE4eG9qc3lVbkd3VzEKN25HejRRNWtEZTNpUTJFNWptTVBuVk1TRTBZVnRIdVRnSW1DR2hBYjFSSjdjTFlvNTIrY1ZvMHNRRXBqOWtYNApobFkzemxxUzRKd0ZrS0x2ZlFWTzBZRmJqTU9EYkhJa3UveGVCSHZBNEVMY3NMMlRzbWdvT25HYUVzVXV2S25zCk8xcjlHVklDejVkdWtBUXN4THpyMUZKZlNwRjNyL0RLOVpNRDQyNU0vaXlpMjJEZWFxOTlyODhRS3kxQ1ZiUTAKLzZDTFdjSndsLzRkUWZCNzdDRld0TFhuL2NXK0VySnpybm4zdnRsQzljTVJNQWhReE54ZnVnVFRGazVBeVFtbwpQeVlKRFoyT1g0SGE4K29Pemp3V1p6QTU0RHdydFY1QlNYU3BtWkNJSVMvdE1KNFRyOEk2QXFjZy9Na1lxUnVrCkE5V0ZnR2ZYTndJREFRQUJvMEl3UURBT0JnTlZIUThCQWY4RUJBTUNBcVF3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVTMxK0RoNHVDUWJPc1o2K1JpTDRUN2VESGErMHdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUlpUGsvMndlSzREa0xpYlRxSUxwakhGL0dOZUR4UmVOOGhKZFNlcVhYeGtOa1NKci9vd0xDTWlRbjRpCkVFajBDcHduN2NwY3ptOFlHMlNEcXNzcVEyK1lpUURUNDFWVHJWSFFNNElLWERlZ09tNFkwSWNkTUJ2dzRJN0wKc3RkeEJYZzRPaHM3TFREZFhpN2E1THU1NzNnajcycHhmNjJweVJ4OWFMRGQrMGNpdVJWck9NTTliRFI1L2xqNApXT3l5WmF4TTF0eDZDRGxYYmlzQXArR291UVhNS1ExNEpkK3YwMTlnWDAzUCtGSGtlNlhWOGlvbHhyN2ErbnpVCnQxZ0FUR0pZL1crOGJqZ3JGbDg2WGZORjhleVNwa2NzckpmNE1jOHFDZVBZZFVSdlkzZGJBL2k4SnAvMUVyNmgKMzR3b0Q4eVBNM1ZCM2RCQUVrQTZIV2xTeDFNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlEVERDQ0FqU2dBd0lCQWdJSUE5cFlNb2tFQ1hFd0RRWUpLb1pJaHZjTkFRRUxCUUF3UkRFU01CQUdBMVVFCkN4TUpiM0JsYm5Ob2FXWjBNUzR3TEFZRFZRUURFeVZyZFdKbExXRndhWE5sY25abGNpMXpaWEoyYVdObExXNWwKZEhkdmNtc3RjMmxuYm1WeU1CNFhEVEl4TURjeE16RXlNRGt5TUZvWERUTXhNRGN4TVRFeU1Ea3lNRm93UkRFUwpNQkFHQTFVRUN4TUpiM0JsYm5Ob2FXWjBNUzR3TEFZRFZRUURFeVZyZFdKbExXRndhWE5sY25abGNpMXpaWEoyCmFXTmxMVzVsZEhkdmNtc3RjMmxuYm1WeU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTFtM0lxV2d2M2NxWWpSVVZUWEE0TTZLUlRLNHU2YlpKUmxIbUhLQU8rOUhkdEw1dXh0VnBHWS9XU0RHWgpHL3JLdWlhTC82aE9HaklwMGdKd0dyOWNURmYvNHZPRWxJSWhFaEx0Kzk5b0ZVQkZlZXBYaWUzSHBqeUUwOHI2CnI2Z0dGZS9idXpiWm0wdnRNaGJucXk3bi9OVlhyZlFPQWhKSUMyR3lOUDVnZGFpcmZGVDdrWkpaOXhoa295ZW0KOEQwTXhmaEwvVExabDh1SVpaRU5BQjVOUy9ZRFFjMXFadHVOYThVNk5SRDJlTktQeEZLQTJJTzRsZ3hXLzNjYQoralkyekswTmpvMENPS2pWUUVBcEpTOUFYUlVrdFpXbWZBeWJoaVFxRktrbzd1cmMxQms0T0JwRHoyZ3RnWWp6CkczejJhRndYYXRqcVFkT0VqeG9DazZta1ZRSURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVuQkdtK1V1aXltVW9zRWdHWEJXbW5uR3pxUTR3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFNc05Fdnk0dWU0eVNuZlNQVEl1alpWN0xFc2htWmY1Z284czhXQWt1QW96Ck1SQUMzbjZaQ2YvbHN3Ti9KUk5FU3pNcEp0MWpGY2taSmZIakhHdWQ5Q0FYb2I3eEE2WEFSamgzeTdpL1p3UloKQjlWQWxpTEcvMk01OFF3TE1YMDBPQmR5THA2Z3hjUkZXZldYSW0xaEkwaElzTERheWNqbXZEaC9RZHJqa1F5UApUN1MxT21IQlcyQVpFcFoyRzFjTjNwSEhSQkxkQkMrZHdFUEU3K0tzNk0xK0FlcDAzbnZqM0MvZTdaUFdURExoCk13dS9MOVhESEQxZlZyZUx1Y1NHcHEycU1CQ2l5cVhLejFuZjlhWWtQWEdST3FETGgvZkpMMzExY3lLR2FxaG0Kem5GdVRNOHM2VERnRkJIdkJJOVhPM2Myc1F0SzBzNDlsb0xSSm1SaWxCaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRGx6Q0NBbitnQXdJQkFnSUlSZmJXUERGaURxRXdEUVlKS29aSWh2Y05BUUVMQlFBd1dURlhNRlVHQTFVRQpBd3hPYjNCbGJuTm9hV1owTFd0MVltVXRZWEJwYzJWeWRtVnlMVzl3WlhKaGRHOXlYMnh2WTJGc2FHOXpkQzF5ClpXTnZkbVZ5ZVMxelpYSjJhVzVuTFhOcFoyNWxja0F4TmpJMk1UYzROVFF3TUI0WERUSXhNRGN4TXpFeU1UVXoKT1ZvWERUTXhNRGN4TVRFeU1UVTBNRm93V1RGWE1GVUdBMVVFQXd4T2IzQmxibk5vYVdaMExXdDFZbVV0WVhCcApjMlZ5ZG1WeUxXOXdaWEpoZEc5eVgyeHZZMkZzYUc5emRDMXlaV052ZG1WeWVTMXpaWEoyYVc1bkxYTnBaMjVsCmNrQXhOakkyTVRjNE5UUXdNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXJURWcKSEsvZTRjcVg1VmNXa2t0RVpSU1pVQktMYjZjYktCd1ZUcjZJUXE4aGRSWUdxVVpXRVRSVTd5RzkxZVlMMkQxYgplYVFsR3l3V1c4L2taWE8wMFU2V1puVHV6YXM1aWJZVENwOTJRYWx6TU9YNkJibEtLMUpOSy9HT3BRYUdLdDhOClhNYmFOSlkzV1BtWHdBRkNoQlg1ZTVSQlVQMGQxZzBReTcxQVp2ZWRqb0x0VTVUeDN4R3EwWGgrL0dTcm9mMnkKVHFJZWROZi80Q3B1bFYzWE9yYnNaeTZqSjFUSi9nTEo3K3d0Wmk3RGNZMEVrNDdRK1lPMXEyckZuN1UzUFFQdgpTTTJlZ3hERS9qQXRqZ1lNNEVPM1FsbUFpdk45WDBNelluNDdPZjlGbmJGMnN3TVF6ejhvcThLY2d2ajh3aHd5CnZwZVdiSkUrb1lHWW5aQ2ZXd0lEQVFBQm8yTXdZVEFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVaHFjdksvMklnU3oyaTNXeFdEK1VOZ0h3WU04d0h3WURWUjBqQkJndwpGb0FVaHFjdksvMklnU3oyaTNXeFdEK1VOZ0h3WU04d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTnkwL3BhCnJUWHB1NkdtQ05uWi9kUHQwT0R0NFhIaDFxdUcxbEh3SHZ0VHo0eUpvSDZaVFJZTWNnL3R3ZkVVVGdrblA2aHIKZDNqOHB2dlAyenZqSkRvdlJ2MHQ0Vmkram1wZXAyRFNycG9JMlhLSCsrQkhMQldhNUpqOVBlZzFDZG41WmgzYgovZ3c1eTV3V0IrWCtmVXI2SHMrTG1nY2pmaUJPVW9sOUNpMS95SklucHRwcEJaWTBESVhaejZKS3ZKSWVPdVhBCllFZGlvcXFSRml5QlBrRWxkbyt4L01HQTR5WjNZUEZsK2pkVUhVRUNYSDUvNys3ZTlwQ3ViTU1DVVhGd040Q24KaGNSV2pJMm1jTFhQS0hVYmdqMS9ySnN5aGhJbUJwY05wUjc3WisvRVZEbC9pTk4ydEpZMUJtb0tQK044NUdVYgpEcStaTVVxVEg2K3RpM009Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUzVENDQTBXZ0F3SUJBZ0lCQ2pBTkJna3Foa2lHOXcwQkFRc0ZBREJITVJRd0VnWURWUVFLRXd0RldFRk4KVUV4RkxrTlBUVEV2TUMwR0ExVUVBeE1tVW1Wa0lFaGhkQ0JVY21GcGJtbHVaeUJEWlhKMGFXWnBZMkYwWlNCQgpkWFJvYjNKcGRIa3dIaGNOTWpFd05URXdNVEV4T0RReFdoY05Nall3TlRFd01URXhPRFF4V2pBMU1SUXdFZ1lEClZRUUtEQXRGV0VGTlVFeEZMa05QVFRFZE1Cc0dBMVVFQXd3VVlYQnBMbTlqY0RRdVpYaGhiWEJzWlM1amIyMHcKZ2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFY4N2ZiTVBvRGl3Rlh5Wng0Mis4eQpISi9ueTdPWjNZWjBMT2pWcE1YZGxOdDlMMFlQLzhJUnpYZk1YTm93b3BiK2V3M2VrUzN4YzI2Z0xkdzVRbGJYCjNzTjRFbmpRSTVpSEtvb3owY3ZwK0p0aFE2WFN1Sk5MZWNydTNMSENxNndqVUQzZWtFVFM0TER1MzJmSU4vS1cKZU50K0J6V2RjcU9LWlp3Y2JSRnIyZTlZeURmNS9RNGJ0QmNPV3BRaHlJSzA2eC9RQ2ROU2VnYTFGQmxReXNjcgo3Z215aTdoNkRpbG5WdHV1YnFEYmZNNzRRQzVxZ2VaYm45bzJrZUcrUGJiT2hVbHdyQ3FxM0haNzlEbDdDM0EvCjgxWTFsVzVUa2pqOUJPaDk1KzlGZXUxN0ZDNnlEVlk4Z2syM1p0RlgxeHB4SVpUNUp0NDVVTGhpM0pnaGw1ODMKQWdNQkFBR2pnZ0ZrTUlJQllEQWZCZ05WSFNNRUdEQVdnQlNEVFZ3ZVcvQnMyeW9mWFVjY1pnYUZlU1p5WkRBOQpCZ2dyQmdFRkJRY0JBUVF4TUM4d0xRWUlLd1lCQlFVSE1BR0dJV2gwZEhBNkx5OXBjR0V0WTJFdVpYaGhiWEJzClpTNWpiMjB2WTJFdmIyTnpjREFPQmdOVkhROEJBZjhFQkFNQ0JQQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01IWUdBMVVkSHdSdk1HMHdhNkF6b0RHR0wyaDBkSEE2THk5cGNHRXRZMkV1WlhoaApiWEJzWlM1amIyMHZhWEJoTDJOeWJDOU5ZWE4wWlhKRFVrd3VZbWx1b2pTa01qQXdNUTR3REFZRFZRUUtEQVZwCmNHRmpZVEVlTUJ3R0ExVUVBd3dWUTJWeWRHbG1hV05oZEdVZ1FYVjBhRzl5YVhSNU1CMEdBMVVkRGdRV0JCUnYKZERSVXh6TGhicy9uT0JCbFp4MTZXUnFHUGpBNEJnTlZIUkVFTVRBdmdoUmhjR2t1YjJOd05DNWxlR0Z0Y0d4bApMbU52YllJWEtpNWhjSEJ6TG05amNEUXVaWGhoYlhCc1pTNWpiMjB3RFFZSktvWklodmNOQVFFTEJRQURnZ0dCCkFGSG9pZkN5ZG41MXkrOTlSUFZiNmhYVno0NlVoSW5OeUd4Qkg3dkRwMmNETm5OZGljajBFeVlEY0ZEVUpLWWcKOWZkcUM5akZjeXJjWVc5MnlhQ3AySlBYRDdhRDJPUGhybE9sa2FNRVUySm13K2JhWHpNTWR6eVVtekJ1SFluWAp1dXp6OVJBZGRzSXhZWCtrOXc5SGh2ZkFzVjQxVURXclpTWDM5YS8yNzdYbmx3dmRvRml1MVVFYng2bE4vemV6Ck5uYnZlRVYrTG9wczlBeWZhTHlIMnJXb25uQUI1RDQzbjZyOFhYRGVYQlFQTGoybFBIdk9PK0xsNUdOa0l3T20KQ2JKai9xOWZVdlZkNTNURXFxT0xMeklSNG9KNlQ1Z04wUFRoYzN3QWFKYlJZZktPQ1prNTJ2bEdHVVFxalc3TApKMGRGWVJ6Mk00VFpnYkFyNndYM2NFTSt6UnpMdjdRdE5FQXJ6MFgzSXNnRHNCOWdBZTJGSkhvMGc3WkVDTUJtCkFHTTVNVjhsbXF0NWNTZUQ3azFVdUVjOXg3NDN0Z1E3eHVqaE1NTnBSL2RCZEJJakttY3lyanJQSzZlQ2FjRHYKTGMyV2pUU3dnZWpndzdRdFdxUCs1TWxVTEZyaXJrajNka2g5Z0IrNU9ZV3RWakl4ZGlvY0E2TUxuTW56Yzk3TwpTUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVOVENDQXgyZ0F3SUJBZ0lVZmRDN3pmaDQ0cTlXS1o4TDByZ3NiYmtYZFUwd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dZOHhDekFKQmdOVkJBWVRBbFZUTVJjd0ZRWURWUVFJREE1T2IzSjBhQ0JEWVhKdmJHbHVZVEVRTUE0RwpBMVVFQnd3SFVtRnNaV2xuYURFUU1BNEdBMVVFQ2d3SFVtVmtJRWhoZERFWk1CY0dBMVVFQ3d3UVVtVmtJRWhoCmRDQlVjbUZwYm1sdVp6RW9NQ1lHQTFVRUF3d2ZVbVZrSUVoaGRDQlVjbUZwYm1sdVp5QlVjblZ6ZENCVFpYSjIKYVdObGN6QWVGdzB5TVRBMU1EVXhOak0wTWpKYUZ3MHpNVEExTURNeE5qTTBNakphTUVjeEZEQVNCZ05WQkFvVApDMFZZUVUxUVRFVXVRMDlOTVM4d0xRWURWUVFERXlaU1pXUWdTR0YwSUZSeVlXbHVhVzVuSUVObGNuUnBabWxqCllYUmxJRUYxZEdodmNtbDBlVENDQWFJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dHUEFEQ0NBWW9DZ2dHQkFKZHMKYkhEa1A3SGdhYW9pWlJTVGtneUhPblJQTnNKSy82ODFPSVlaMTU1REF5OG54eFh1R1RsZktyMHNhQ1N4ek1oUgppWExXYVhNRUd6aXoyZ0l6Ti9KR0xtUWhnWGxaOXFKNlZLenpwZmpKaUc0Y0trYXJXeU1SMkhKSTB5Wko4b2xNCjVHK3BiMTBPWUJsb1YzeUg3L1pwTnVHY1hTYThzNXhxeE1Lc3p5dWZqK255RHpOYlFoU0VEV3FHVmtyM2NNMmIKSGxEbEZaNUMwSEpvR1dXdldGY0VIWXp5c1dNTUQ0Z1NjNVRNcjI4TlpXTXRqT0NoclpLQWhnSER5c1VJOFNqbgpLeU9HSGROZ3l1VXpXd1Bvc3FGNHlnREQ3dndzOVZNTU9Rc29rWjZQWkpJbzA3RFpTZFZ2VUJlUzhmb0ZHNWdiClY1VktmSWZtSFVJUDFXK2NyZFY5VmZHcXhCbzc5c2RUektHRHFHNzlUSVZqR0VYRTd4OVVpdDhvYzc5MmxrVU8KUkJBU0hQRm9uWU45RE1SUXBYQm5oOTYya0NXQTZMZkxDdU16a0J2T2Q3TFVseWlRRjhyQURQV2FkTnNSSTZLegpxZWJEbmhkbVhESmdDeW5zTk50Ni9qQ1J0U1hRVk1iNXo5YnVPbGtXUGIrTkRhL29HdHV2Z0JKSFNSam9xUUlECkFRQUJvMUF3VGpBZEJnTlZIUTRFRmdRVWcwMWNIbHZ3Yk5zcUgxMUhIR1lHaFhrbWNtUXdId1lEVlIwakJCZ3cKRm9BVTdCNTZwcW55RVBkN3ZhcEtrUGxaYmZJWlNPc3dEQVlEVlIwVEJBVXdBd0VCL3pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFBcFFGRzBkcFBkYTUxWGZ3cFBQdVJPK2xhZnR1QnVhRytrSG1NVVlwVmtCZ25PZ0hRYzNVCjh4d3BuSkNGYlVQTHJQSklxRkR0MGQ2TUt0T2dNS1l5L0o2MGhaUUsrNW0xT2xKa2Z6N2lCYkRQdUc1c3o2eG4KU1F5TzlBT1IrcEw1SHFZa1FBY09BeDN1YnZCRyt5MlM2WDhDYzF6SEp1N3R0b3VsNFQ3bUJQSzhWZVl6TDNTdwpOYVgxZ3JIRkhZYnRVa3Y5Mm9kTjM2OXlDT2lGYyt0UEd2dDJnNnkwbzRSWXVub21XdnRjSitrQkczbHlGVStUCkNmYTYwUzlHV2dZYzRVMzdSRVVNUkw3VWxWcVRzQkdtQUZtb051eVp5aDNSZ0dWRU1TRHc3V0lZeG5OSXBjN3cKaFllVnN2aU5JSEE2aXJxdVVXeS9nRFVUTC94amYrNWlpdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVuakNDQTRhZ0F3SUJBZ0lKQUx2UW96cTVpVmwrTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUdQTVFzd0NRWUQKVlFRR0V3SlZVekVYTUJVR0ExVUVDQXdPVG05eWRHZ2dRMkZ5YjJ4cGJtRXhFREFPQmdOVkJBY01CMUpoYkdWcApaMmd4RURBT0JnTlZCQW9NQjFKbFpDQklZWFF4R1RBWEJnTlZCQXNNRUZKbFpDQklZWFFnVkhKaGFXNXBibWN4CktEQW1CZ05WQkFNTUgxSmxaQ0JJWVhRZ1ZISmhhVzVwYm1jZ1ZISjFjM1FnVTJWeWRtbGpaWE13SGhjTk1qRXcKTlRBMU1UWXhNVEk1V2hjTk16RXdOVEF6TVRZeE1USTVXakNCanpFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVgpCQWdNRGs1dmNuUm9JRU5oY205c2FXNWhNUkF3RGdZRFZRUUhEQWRTWVd4bGFXZG9NUkF3RGdZRFZRUUtEQWRTClpXUWdTR0YwTVJrd0Z3WURWUVFMREJCU1pXUWdTR0YwSUZSeVlXbHVhVzVuTVNnd0pnWURWUVFEREI5U1pXUWcKU0dGMElGUnlZV2x1YVc1bklGUnlkWE4wSUZObGNuWnBZMlZ6TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBUThBTUlJQkNnS0NBUUVBeUZkR0JzTWk3RFNZYTMzNnhRNk5yUGJCTkx0VmFod1p2WGo2M2NUcFRnSUIxRzJtClNjbzRjUGU5YVdUV0RFYVZpVE91MG42eWhva0NlMElneVBUaEJCQzRUK29lclBUb0dhdzJjS0NwNE85clUwTysKbkdZWnQ4cEl2V3lZRGhpMEMxdGgxTVJJb2dBaWVXbW9KMTZ5V2c1VXNNZGg3R1F2VEFtN1hxM2hsQ2c3Z3gzTQpPb0VNS1R4WlV4UzZVOXJRSE0xRVVoK1RyZWRkQlNBREIwbVlHd25RRGxzR1lxd29CdGE3RUtEcTVwd2c4RUJ3CndoV0FuUWtxdHVIbExJeGNFQlFVazhEZlZoWDQzSUNrNHFuZkNadlEvdlB2UFNNNnVJR0JFMXVKdHdEak93dUwKYU90ekMzb1J1cm9xMDFYYWE3aFdOcFJGUG5idW84bXI0dnJNY1FJREFRQUJvNEg2TUlIM01BOEdBMVVkRXdFQgovd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUVGT3dlZXFhcDhoRDNlNzJxU3BENVdXM3lHVWpyTUlIRUJnTlZIU01FCmdid3dnYm1BRk93ZWVxYXA4aEQzZTcycVNwRDVXVzN5R1Vqcm9ZR1ZwSUdTTUlHUE1Rc3dDUVlEVlFRR0V3SlYKVXpFWE1CVUdBMVVFQ0F3T1RtOXlkR2dnUTJGeWIyeHBibUV4RURBT0JnTlZCQWNNQjFKaGJHVnBaMmd4RURBTwpCZ05WQkFvTUIxSmxaQ0JJWVhReEdUQVhCZ05WQkFzTUVGSmxaQ0JJWVhRZ1ZISmhhVzVwYm1jeEtEQW1CZ05WCkJBTU1IMUpsWkNCSVlYUWdWSEpoYVc1cGJtY2dWSEoxYzNRZ1UyVnlkbWxqWlhPQ0NRQzcwS002dVlsWmZqQU4KQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBWFdTczhLMUF0WDF0SitCTFVDSUoxK01aZmZNZEVNdG9Ud3ZJbkZhcgprenFOS1VZdFdWR2dsQjh6T1lBeHc0UnJLU1BJWmEyNGVqc093OW8rMlVwUHY1ZytZV1JKQXI4MithY1pWUHRDCmxJdzdsR2tkMExlRi9Gc25hbjdOdWVWOURCSHJNTXp6eGVLMCtlU2hJL0d4cHZzZzZDcFlrSzR5OUZlZ0V0a0QKSHdlZFNGN2xZZi91WE80dGdzSHFkdDVpVng3bDFqRVF0UnpLTWxTdXp1N1k2YjFyNWNIak1ZdTNrcXZ4NEdkVwpFTkFKYXBvS0laWTc5bWZOWm9TN3d2bTRxN2daVTZpRmg0UVA3UmpLNGFPTVBVQ0xBYTFEbGtRTXNPMFE1Z2JpCmJXQmsvRkhXYUovbFd4djBySUh2NXRSUTBZUFpqM01KZXlteVR2d3Vsd3luRFE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCgotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRFVUQ0NBam1nQXdJQkFnSUlMQU8wcHF1UWdYc3dEUVlKS29aSWh2Y05BUUVMQlFBd05qRTBNRElHQTFVRQpBd3dyYjNCbGJuTm9hV1owTFhObGNuWnBZMlV0YzJWeWRtbHVaeTF6YVdkdVpYSkFNVFl5TmpFM09EVTBOVEFlCkZ3MHlNakE1TVRjd09UVTVORGhhRncweU5ERXhNVFV3T1RVNU5EbGFNRFl4TkRBeUJnTlZCQU1NSzI5d1pXNXoKYUdsbWRDMXpaWEoyYVdObExYTmxjblpwYm1jdGMybG5ibVZ5UURFMk1qWXhOemcxTkRVd2dnRWlNQTBHQ1NxRwpTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDd09FeVFOVlduTk1wVldXekU0ZnNWNlJKbGhJSndmeVJ6CmlPMTB6RWdYTDNncys5MWlkdGZUNS93cGw1SHZRQ1BQWkFZdWZjb2EyaTBUVUFZbE9qMjJFekl5NXNTbG9jSWEKSDVhUmNaZjIwdVRXODhZdUxVQTd3NkErUHZyU0ZSZC9QeExuTTg2ajFKK2l3V1RTTUYzZVhjUFZsc2w0KzlmcQpWdkloODNlYko5TCtjaEkvRzg5b0hhcklvd25NTE9wRUVkZ3FYL3J5dFR1SGFtNWh6d1lXeWFncXVmL1Z6c3RDCnFVUHl2K1Ztc2E3MWkyVytPTjczMk1oMXQ2VEdBdmJDajFQMFlUWDV5ZWVhSlp5ZFpqeVZJZkRlc3hCQ1I0T20KTWRwcmFBd1pCNEgyRGhSRy9DRDUvZmZaY2ppQXBLRTh6bTdoODBBaEYwQnVrb0xLTHFyMUFnTUJBQUdqWXpCaApNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUzAyNVZ1CkdSTHk3dGV5cGI4WUNpS21keGNMcnpBZkJnTlZIU01FR0RBV2dCUzAyNVZ1R1JMeTd0ZXlwYjhZQ2lLbWR4Y0wKcnpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVhrT0pIakhhUjlpellROERtTlMxMlFQaWhLOTlJNEl1YWkwYwpKeUlBN2ZQdUhXR21qRWVkMmxadjQrV2ltUHVKcURFako4Mk5tYzVHRnNTR25aWm0yY1FNQW1CWHhVUUJqMVJrCjZHRlYyQ1Y2N0tpVUx3UGpEdzNjKzk4a1pqUGZOcEdCT0xKTGcrMWkzcUdjSk11Zi9lNWNxT2pEd1MzUmVucVIKNndzQzJJY295VndoMjByT1p2MnhtRVFwQStQdU96V0pZZE9jZnRRMkU2cnY3T3lyOVVLd2p2TmFkRE8wV3lzegpQMW9ZSVZHV0F0MlB2SXljMHgzbFlwSWJuVys0UnhUVmIxclBQemxZamZraXNxSE00ZnhSM2JVczZqR09HMW9tCkFxaDlkUTQ3YTY0OElCTGthbDZPVU5NRXhLSDNPditIUlBqMGRyWmd6RllLR2hVVjh3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRFVUQ0NBam1nQXdJQkFnSUlmZFFzbDF3OG1PMHdEUVlKS29aSWh2Y05BUUVMQlFBd05qRTBNRElHQTFVRQpBd3dyYjNCbGJuTm9hV1owTFhObGNuWnBZMlV0YzJWeWRtbHVaeTF6YVdkdVpYSkFNVFl5TmpFM09EVTBOVEFlCkZ3MHlNVEEzTVRNeE1qRTFORFJhRncweU16RXdNVGN3T1RVNU5EbGFNRFl4TkRBeUJnTlZCQU1NSzI5d1pXNXoKYUdsbWRDMXpaWEoyYVdObExYTmxjblpwYm1jdGMybG5ibVZ5UURFMk1qWXhOemcxTkRVd2dnRWlNQTBHQ1NxRwpTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDMVM5VURtV1hxTEZjNnhaM1ZmemRNYUl2YUoxMDcvZ2syCjZjMjRDNzJwUlpxUmFkUU85Vk8xc1VUK2NPNmlyNVltdldCanExTVRIb0diaWx2NG00RkxFSGMzMTJERzBTOUoKOEswQlpoQmpyZkp0SkM4NkFqekx3UmhIMFlhTHRWV1htSFV0WGRPaVE4SHB4a1ZiUFg3cnFWUmh5aHZPT3BkbApBc3dodUR2eWxxUitGdms1eklvN0RZa2dFSXZBTGFRMUplQStlQVRNTGd5OXljaVZVR1NzVEQ0dzZZVUZ0RjhJCjdBOGQxUmRPNVhiSkZTejd2NW1RSXRBVXc1eDJNMkN6VTdidVdVYUZVaXZQQlJhRTg0Y2VUN2htcTJDWTBhSlgKU0pXeVA5RVI2akQ2Rk9HYVJySUZGUktxYnJkMFRzTG11dUdQMEFsWWNEbWhSM0J1SElMUEFnTUJBQUdqWXpCaApNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUzlFaTVaCk94WUJLQ0ZDajgyc011Vkcwb2pvZERBZkJnTlZIU01FR0RBV2dCUzAyNVZ1R1JMeTd0ZXlwYjhZQ2lLbWR4Y0wKcnpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWp5OFlvWlRBL1VJTE05M0NUeCtCc0pCaHZGLzkvSEc0U0VPVgpwS1FWZDBvaFF2azBTUGl6SS9uc1V3NW1pL1hhZWE5aC9QeWsvOE01STMzSDhyTGxXMnZ1VS9OMzM2VytsdjVXCi96VmROMk9zSFRGY0cyRFJmNXlUS08xbWFoanpVY1FEQ3NYOVBPQkFCTVhla2xKeEhNcC9ISUxvcFVFekJlVE0KYlBmN1VLV01BZUVXYXA5Yjk5eFF1RmN6MTZ0cmxFTFZzaTY3VVB6UmNvZkhFSWdGMkdqeHR3U3F4UWNvUUo2NAo3NVVrQzJKc09GUWx5TFduVE9NN25WdjZWYnorV3VhVlFLTmFQQnBZdHBMcUZkU3JOVVJoV0ZtcUFwOE5aUUZnClYyWENRU3lPNUpZZyt3R2lsa0FnRFFuYi8vUW94ZVV2c2xETjFSN3ZrWUZCbG02bkdRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrTjBlbkl0VldGWGFHbFlSbWRUYVdreVlrMWZMWEJaY1dwbWVXUnJUekpuTWt4dmVrUldXbFZ4U0dNaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpwYm5OMFlXeHNMWFJ5YjNWaWJHVnphRzl2ZENJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZqY21WMExtNWhiV1VpT2lKaWRXbHNaR1Z5TFhSdmEyVnVMV0pqWkdocUlpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVibUZ0WlNJNkltSjFhV3hrWlhJaUxDSnJkV0psY201bGRHVnpMbWx2TDNObGNuWnBZMlZoWTJOdmRXNTBMM05sY25acFkyVXRZV05qYjNWdWRDNTFhV1FpT2lJM01tWTRPVFUxTWkwMU1qa3dMVFJpWWprdFlqSTJZaTAyTlRVMU1HUTFOR05sTWpNaUxDSnpkV0lpT2lKemVYTjBaVzA2YzJWeWRtbGpaV0ZqWTI5MWJuUTZhVzV6ZEdGc2JDMTBjbTkxWW14bGMyaHZiM1E2WW5WcGJHUmxjaUo5LmdUbC1IQU5PMkV3b3Q5S2FLU2xhRzI1ajg5QmhvWnJlN1l3VDd4TXFvMUk5RVpTTFEzcXEtc2RoNGpIMFBlXzdRSlJvUVJZc1kxSVV5TXJkYi1SeVA3bUUzUkU3U3lqY0hqM2hUTGlxX1BkWmRuUVM2Tkp3SERSX1I5Mkp6a3J6V2swaFNNQkZxUU10Vk1ISnN4S0FSaU5qOFZpZlVkemlhOVlKTDlnTllvSVNoNWZxRTQ4ZnRpdF9WU1JCX0psNDEyVEs0V2oyZHZnZVRVNVZveHJnUy1FNTN4cUxOcTVvU3hCZ1gtd1RiOXZTN3dLemZvb1pPcDlVT1oxc0hZekxXckJkdDgwNmJGQVo0R1p6Q29KcEZOUlpvY2RhOEw1QlZ6RzFscTgxTGRoTlNtb1pDMkcxZWVDV1h4bXJZNFdNbzRRd1hrTWhCWEhicE9wYVFVMDJxdw==
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/service-account.name: builder
      kubernetes.io/service-account.uid: 72f89552-5290-4bb9-b26b-65550d54ce23
    creationTimestamp: "2022-09-17T10:19:16Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:ca.crt: {}
          f:namespace: {}
          f:service-ca.crt: {}
          f:token: {}
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/service-account.name: {}
            f:kubernetes.io/service-account.uid: {}
        f:type: {}
      manager: kube-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    name: builder-token-bcdhj
    namespace: install-troubleshoot
    resourceVersion: "71314"
    selfLink: /api/v1/namespaces/install-troubleshoot/secrets/builder-token-bcdhj
    uid: 67b73e8c-9d34-461d-8213-575aa3ac6b38
  type: kubernetes.io/service-account-token
- apiVersion: v1
  data:
    ca.crt: 
    namespace: aW5zdGFsbC10cm91Ymxlc2hvb3Q=
    service-ca.crt: 
    token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrTjBlbkl0VldGWGFHbFlSbWRUYVdreVlrMWZMWEJaY1dwbWVXUnJUekpuTWt4dmVrUldXbFZ4U0dNaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpwYm5OMFlXeHNMWFJ5YjNWaWJHVnphRzl2ZENJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZqY21WMExtNWhiV1VpT2lKaWRXbHNaR1Z5TFhSdmEyVnVMWFJzZHpkNElpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVibUZ0WlNJNkltSjFhV3hrWlhJaUxDSnJkV0psY201bGRHVnpMbWx2TDNObGNuWnBZMlZoWTJOdmRXNTBMM05sY25acFkyVXRZV05qYjNWdWRDNTFhV1FpT2lJM01tWTRPVFUxTWkwMU1qa3dMVFJpWWprdFlqSTJZaTAyTlRVMU1HUTFOR05sTWpNaUxDSnpkV0lpT2lKemVYTjBaVzA2YzJWeWRtbGpaV0ZqWTI5MWJuUTZhVzV6ZEdGc2JDMTBjbTkxWW14bGMyaHZiM1E2WW5WcGJHUmxjaUo5LkVaZVN2T19UVnlhVjRYdEdfMUc1Mm1yemtDZ3RISDJ2dDQwckdwSE1SaDVxNl8zRnhkbVVPTkpNTFk5UThmZU1hak13VUdVVmVWandJRkRBa25KRFdiUksxUURBT3RLenZFb0JVNUdpaUtCZS1kTzViN2NXRXJfYXQ3NUpYcEQzTzVvcXE1Z1V1UTRwelkzLUZjLXZIdnBPYmxVS1FRLWswdTM5TFl4TGc0UjA4YnJZODFGYVppT1pGY25YRGNBLW90Qlp2bzdUcEtIQm5nRFRLS3ZVYUlxemRkRm9NUlBKR0hwV1pNUlFnV0ZVN3QtNlJCOWFhVVhWdUg1WVdHRkNpNFNfempPeTMtN19oVFlWakpnMW5SQ1FkWnF1bXViN0JONTBHXzNrM0dsTHFyam4tYWhMSXFKQ0k1YmhXTEVTenZtNGl3SEs2Mm1jSTZ3aWpLUjItUQ==
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/created-by: openshift.io/create-dockercfg-secrets
      kubernetes.io/service-account.name: builder
      kubernetes.io/service-account.uid: 72f89552-5290-4bb9-b26b-65550d54ce23
    creationTimestamp: "2022-09-17T10:19:16Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:ca.crt: {}
          f:namespace: {}
          f:service-ca.crt: {}
          f:token: {}
      manager: kube-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/created-by: {}
            f:kubernetes.io/service-account.name: {}
            f:kubernetes.io/service-account.uid: {}
        f:type: {}
      manager: openshift-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    name: builder-token-tlw7x
    namespace: install-troubleshoot
    resourceVersion: "71319"
    selfLink: /api/v1/namespaces/install-troubleshoot/secrets/builder-token-tlw7x
    uid: 2ac5a9e1-862c-4bc8-bf5b-90ad592dfbf3
  type: kubernetes.io/service-account-token
- apiVersion: v1
  data:
    .dockercfg: 
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/service-account.name: default
      kubernetes.io/service-account.uid: 412b8cc7-435c-403b-b7b4-8cb4dfd0b5de
      openshift.io/token-secret.name: default-token-58lp7
      openshift.io/token-secret.value: eyJhbGciOiJSUzI1NiIsImtpZCI6IkN0enItVWFXaGlYRmdTaWkyYk1fLXBZcWpmeWRrTzJnMkxvekRWWlVxSGMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJpbnN0YWxsLXRyb3VibGVzaG9vdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLTU4bHA3Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI0MTJiOGNjNy00MzVjLTQwM2ItYjdiNC04Y2I0ZGZkMGI1ZGUiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6aW5zdGFsbC10cm91Ymxlc2hvb3Q6ZGVmYXVsdCJ9.dmaHw932563WnWyTlNks4Sm3X7dODnUoTwUxiiL1pt-QSc3nlxkPTyxiQJBA9aLSJSnc8y-ftC8yZKES3UNmEDJAXgu03O-9Mr8TuSMJ6lj8oBuWgxuPrjmM2OqxEC--jyXUJ2IK6GqStbeb2IsUAgKphDMarx4iHF4eB8CzoTUYwFK_TWAP3JhgDMHhaFt35sv-bDjtjY3MDgkCafDAuq1k3-RrrHVZqfluK-kfYETs1AlvE2AIB4WMFuhK88M9NT-SWiDntXeAm60cUt-KtluwudV9hG8R4Um4Lwgt-gfTmrya_CWQ4iZBheg05qhh7NiqVAF783UnkMeZfpv7OQ
    creationTimestamp: "2022-09-17T10:19:16Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:.dockercfg: {}
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/service-account.name: {}
            f:kubernetes.io/service-account.uid: {}
            f:openshift.io/token-secret.name: {}
            f:openshift.io/token-secret.value: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"1722daa2-e973-4b59-b816-63f31b35889f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:type: {}
      manager: openshift-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    name: default-dockercfg-94vr7
    namespace: install-troubleshoot
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: false
      controller: true
      kind: Secret
      name: default-token-58lp7
      uid: 1722daa2-e973-4b59-b816-63f31b35889f
    resourceVersion: "71328"
    selfLink: /api/v1/namespaces/install-troubleshoot/secrets/default-dockercfg-94vr7
    uid: 498aa4bb-e1f7-4823-afbf-6ab730f71b8a
  type: kubernetes.io/dockercfg
- apiVersion: v1
  data:
    ca.crt: 
    namespace: aW5zdGFsbC10cm91Ymxlc2hvb3Q=
    service-ca.crt: 
    token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrTjBlbkl0VldGWGFHbFlSbWRUYVdreVlrMWZMWEJaY1dwbWVXUnJUekpuTWt4dmVrUldXbFZ4U0dNaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpwYm5OMFlXeHNMWFJ5YjNWaWJHVnphRzl2ZENJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZqY21WMExtNWhiV1VpT2lKa1pXWmhkV3gwTFhSdmEyVnVMVFU0YkhBM0lpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVibUZ0WlNJNkltUmxabUYxYkhRaUxDSnJkV0psY201bGRHVnpMbWx2TDNObGNuWnBZMlZoWTJOdmRXNTBMM05sY25acFkyVXRZV05qYjNWdWRDNTFhV1FpT2lJME1USmlPR05qTnkwME16VmpMVFF3TTJJdFlqZGlOQzA0WTJJMFpHWmtNR0kxWkdVaUxDSnpkV0lpT2lKemVYTjBaVzA2YzJWeWRtbGpaV0ZqWTI5MWJuUTZhVzV6ZEdGc2JDMTBjbTkxWW14bGMyaHZiM1E2WkdWbVlYVnNkQ0o5LmRtYUh3OTMyNTYzV25XeVRsTmtzNFNtM1g3ZE9EblVvVHdVeGlpTDFwdC1RU2Mzbmx4a1BUeXhpUUpCQTlhTFNKU25jOHktZnRDOHlaS0VTM1VObUVESkFYZ3UwM08tOU1yOFR1U01KNmxqOG9CdVdneHVQcmptTTJPcXhFQy0tanlYVUoySUs2R3FTdGJlYjJJc1VBZ0twaERNYXJ4NGlIRjRlQjhDem9UVVl3RktfVFdBUDNKaGdETUhoYUZ0MzVzdi1iRGp0alkzTURna0NhZkRBdXExazMtUnJySFZacWZsdUsta2ZZRVRzMUFsdkUyQUlCNFdNRnVoSzg4TTlOVC1TV2lEbnRYZUFtNjBjVXQtS3RsdXd1ZFY5aEc4UjRVbTRMd2d0LWdmVG1yeWFfQ1dRNGlaQmhlZzA1cWhoN05pcVZBRjc4M1Vua01lWmZwdjdPUQ==
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/created-by: openshift.io/create-dockercfg-secrets
      kubernetes.io/service-account.name: default
      kubernetes.io/service-account.uid: 412b8cc7-435c-403b-b7b4-8cb4dfd0b5de
    creationTimestamp: "2022-09-17T10:19:16Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:ca.crt: {}
          f:namespace: {}
          f:service-ca.crt: {}
          f:token: {}
      manager: kube-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/created-by: {}
            f:kubernetes.io/service-account.name: {}
            f:kubernetes.io/service-account.uid: {}
        f:type: {}
      manager: openshift-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    name: default-token-58lp7
    namespace: install-troubleshoot
    resourceVersion: "71320"
    selfLink: /api/v1/namespaces/install-troubleshoot/secrets/default-token-58lp7
    uid: 1722daa2-e973-4b59-b816-63f31b35889f
  type: kubernetes.io/service-account-token
- apiVersion: v1
  data:
    ca.crt: 
    namespace: aW5zdGFsbC10cm91Ymxlc2hvb3Q=
    service-ca.crt: 
    token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrTjBlbkl0VldGWGFHbFlSbWRUYVdreVlrMWZMWEJaY1dwbWVXUnJUekpuTWt4dmVrUldXbFZ4U0dNaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpwYm5OMFlXeHNMWFJ5YjNWaWJHVnphRzl2ZENJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZqY21WMExtNWhiV1VpT2lKa1pXWmhkV3gwTFhSdmEyVnVMV1I2TjNCd0lpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVibUZ0WlNJNkltUmxabUYxYkhRaUxDSnJkV0psY201bGRHVnpMbWx2TDNObGNuWnBZMlZoWTJOdmRXNTBMM05sY25acFkyVXRZV05qYjNWdWRDNTFhV1FpT2lJME1USmlPR05qTnkwME16VmpMVFF3TTJJdFlqZGlOQzA0WTJJMFpHWmtNR0kxWkdVaUxDSnpkV0lpT2lKemVYTjBaVzA2YzJWeWRtbGpaV0ZqWTI5MWJuUTZhVzV6ZEdGc2JDMTBjbTkxWW14bGMyaHZiM1E2WkdWbVlYVnNkQ0o5Lmc4M0hmeHlsQWlzX2lBLWp5OWYxaGtxenNJLTNqUEdWb2NhRkQ5U0dBSGdfMFRLYlJhVXVhNVBpczBYNUlpSDdmb2ZSUkc4OTRuaGZBVkhIRkd5UVFTaVhQTEtHSnBCODVmV3pVSFZaeHFvZHBscV9CdGpzRFFzMWxieVVsS0Y3MG1ibXQzMW1Yd3p6N1FHV1EySkYxTjRyLTVOUVo5WkZHRkxJaUphZW85a3hpZnZ2UGFuU2pVSEVsajRMRUhZX2xmeEZwV1lYRzhaempBWHcwN1lWX3dLSHlNcG9vZFJGTG1Lenl4dkdyY1haSjdIa1Q5UUZIemthLXdjZHM3LXF2Wlc4RTlySlBETFlLX0lfVmNmNWIzNHVfYUNQWENzMlNUTzIxRGxwamxhZWFaODF4N3lNZFpkcHBKa0dqdjBoODlnZDRxdEpSZDV0NEl0WGMyYlJ3UQ==
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/service-account.name: default
      kubernetes.io/service-account.uid: 412b8cc7-435c-403b-b7b4-8cb4dfd0b5de
    creationTimestamp: "2022-09-17T10:19:16Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:ca.crt: {}
          f:namespace: {}
          f:service-ca.crt: {}
          f:token: {}
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/service-account.name: {}
            f:kubernetes.io/service-account.uid: {}
        f:type: {}
      manager: kube-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    name: default-token-dz7pp
    namespace: install-troubleshoot
    resourceVersion: "71313"
    selfLink: /api/v1/namespaces/install-troubleshoot/secrets/default-token-dz7pp
    uid: bfed4e23-19c1-4fb5-b736-198942134b09
  type: kubernetes.io/service-account-token
- apiVersion: v1
  data:
    .dockercfg: 
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/service-account.name: deployer
      kubernetes.io/service-account.uid: e846ac81-0939-4b0e-8476-fa333cbb71e4
      openshift.io/token-secret.name: deployer-token-pb5r6
      openshift.io/token-secret.value: eyJhbGciOiJSUzI1NiIsImtpZCI6IkN0enItVWFXaGlYRmdTaWkyYk1fLXBZcWpmeWRrTzJnMkxvekRWWlVxSGMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJpbnN0YWxsLXRyb3VibGVzaG9vdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZXBsb3llci10b2tlbi1wYjVyNiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJkZXBsb3llciIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImU4NDZhYzgxLTA5MzktNGIwZS04NDc2LWZhMzMzY2JiNzFlNCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDppbnN0YWxsLXRyb3VibGVzaG9vdDpkZXBsb3llciJ9.O5L9AkPXrlqbcu-preSA_HIHi-LMt_bEoQFszIRn7FASgqJ-ifPr5uzr44oyiLDqOt6X4nZVLNG81h_H_dTMLkOXV_WxqIm7GCd79ZuWRGUl2uOthNGOo9DZVq5sgiitrXtj1x-3A6TwJ2Q2kTP2Z2EXE9UHLC83DtQd8JyG3-SKu1i8hD3w2OfZertVSs0C8vsaVt4ieUnKiAs7NuYbiK4Ag9mUUkSouGfKX06b_eey89sc1h4fbfQ4etrrH0OSzvmnXSuOm1Da9C4R4NeZ-FJE_JJbH05eebtHT8u5SSGCPUdPDSYS-37uwl8LvcmyYYJ_DOTtzIZhha9Qa9KrIw
    creationTimestamp: "2022-09-17T10:19:16Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:.dockercfg: {}
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/service-account.name: {}
            f:kubernetes.io/service-account.uid: {}
            f:openshift.io/token-secret.name: {}
            f:openshift.io/token-secret.value: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"e0982235-2a09-47e7-951f-96e34888ce0e"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:type: {}
      manager: openshift-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    name: deployer-dockercfg-r52zk
    namespace: install-troubleshoot
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: false
      controller: true
      kind: Secret
      name: deployer-token-pb5r6
      uid: e0982235-2a09-47e7-951f-96e34888ce0e
    resourceVersion: "71326"
    selfLink: /api/v1/namespaces/install-troubleshoot/secrets/deployer-dockercfg-r52zk
    uid: 11015582-353b-4f39-9b75-06e47e289741
  type: kubernetes.io/dockercfg
- apiVersion: v1
  data:
    ca.crt: 
    namespace: aW5zdGFsbC10cm91Ymxlc2hvb3Q=
    service-ca.crt: 
    token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrTjBlbkl0VldGWGFHbFlSbWRUYVdreVlrMWZMWEJaY1dwbWVXUnJUekpuTWt4dmVrUldXbFZ4U0dNaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpwYm5OMFlXeHNMWFJ5YjNWaWJHVnphRzl2ZENJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZqY21WMExtNWhiV1VpT2lKa1pYQnNiM2xsY2kxMGIydGxiaTAxTlhSNE55SXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWeWRtbGpaUzFoWTJOdmRXNTBMbTVoYldVaU9pSmtaWEJzYjNsbGNpSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWeWRtbGpaUzFoWTJOdmRXNTBMblZwWkNJNkltVTRORFpoWXpneExUQTVNemt0TkdJd1pTMDRORGMyTFdaaE16TXpZMkppTnpGbE5DSXNJbk4xWWlJNkluTjVjM1JsYlRwelpYSjJhV05sWVdOamIzVnVkRHBwYm5OMFlXeHNMWFJ5YjNWaWJHVnphRzl2ZERwa1pYQnNiM2xsY2lKOS5zelVzVVJKQ2xrZU9SWFVpSW9WcnlpUFd0bkVTbEJYNnotMG00SzZmV21ROE1aZEtKN2FmUnBqc3ZQMGs2eGp6U3QteVBJejNDWDBYc0ZZYnQ3eXFZTlJ1RUpFMmhhLTd0b3JuUW1zY2N0Z0E0bG9IdEI3RVQ4ZVlkNk91SzRVM05VNGs2azZYWWMzSHI1di1sbE5nTXdBbndNWEFGSjFRVGc3eHZrWmF3QnRuTTZxX3BXblJwd1czY0ZsNGJ6OGVJRjNIdk4wTjFZWHlfMXJraURpSFhDa0tELWx4U0I0VlJZU3dUeFJZSThlUGc2YmRyTXVfOW16dnBRWUl5eFFFVENQZEZqRFBub2VnUXNmR2dDTWtyMUQ0NHJkcU9TRlktbVU5emVGbFk2YjBvbi1xR3U5N2JWbFpoeG1XWDRITFZ6dW51VE02YWg0czZFM3JBcVA5YXc=
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/service-account.name: deployer
      kubernetes.io/service-account.uid: e846ac81-0939-4b0e-8476-fa333cbb71e4
    creationTimestamp: "2022-09-17T10:19:16Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:ca.crt: {}
          f:namespace: {}
          f:service-ca.crt: {}
          f:token: {}
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/service-account.name: {}
            f:kubernetes.io/service-account.uid: {}
        f:type: {}
      manager: kube-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    name: deployer-token-55tx7
    namespace: install-troubleshoot
    resourceVersion: "71324"
    selfLink: /api/v1/namespaces/install-troubleshoot/secrets/deployer-token-55tx7
    uid: 15e89ffd-5d0d-4421-b6fd-c6452bf71bcb
  type: kubernetes.io/service-account-token
- apiVersion: v1
  data:
    ca.crt: 
    namespace: aW5zdGFsbC10cm91Ymxlc2hvb3Q=
    service-ca.crt: 
    token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrTjBlbkl0VldGWGFHbFlSbWRUYVdreVlrMWZMWEJaY1dwbWVXUnJUekpuTWt4dmVrUldXbFZ4U0dNaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpwYm5OMFlXeHNMWFJ5YjNWaWJHVnphRzl2ZENJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZqY21WMExtNWhiV1VpT2lKa1pYQnNiM2xsY2kxMGIydGxiaTF3WWpWeU5pSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWeWRtbGpaUzFoWTJOdmRXNTBMbTVoYldVaU9pSmtaWEJzYjNsbGNpSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWeWRtbGpaUzFoWTJOdmRXNTBMblZwWkNJNkltVTRORFpoWXpneExUQTVNemt0TkdJd1pTMDRORGMyTFdaaE16TXpZMkppTnpGbE5DSXNJbk4xWWlJNkluTjVjM1JsYlRwelpYSjJhV05sWVdOamIzVnVkRHBwYm5OMFlXeHNMWFJ5YjNWaWJHVnphRzl2ZERwa1pYQnNiM2xsY2lKOS5PNUw5QWtQWHJscWJjdS1wcmVTQV9ISUhpLUxNdF9iRW9RRnN6SVJuN0ZBU2dxSi1pZlByNXV6cjQ0b3lpTERxT3Q2WDRuWlZMTkc4MWhfSF9kVE1Ma09YVl9XeHFJbTdHQ2Q3OVp1V1JHVWwydU90aE5HT285RFpWcTVzZ2lpdHJYdGoxeC0zQTZUd0oyUTJrVFAyWjJFWEU5VUhMQzgzRHRRZDhKeUczLVNLdTFpOGhEM3cyT2ZaZXJ0VlNzMEM4dnNhVnQ0aWVVbktpQXM3TnVZYmlLNEFnOW1VVWtTb3VHZktYMDZiX2VleTg5c2MxaDRmYmZRNGV0cnJIME9TenZtblhTdU9tMURhOUM0UjROZVotRkpFX0pKYkgwNWVlYnRIVDh1NVNTR0NQVWRQRFNZUy0zN3V3bDhMdmNteVlZSl9ET1R0eklaaGhhOVFhOUtySXc=
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/created-by: openshift.io/create-dockercfg-secrets
      kubernetes.io/service-account.name: deployer
      kubernetes.io/service-account.uid: e846ac81-0939-4b0e-8476-fa333cbb71e4
    creationTimestamp: "2022-09-17T10:19:16Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:ca.crt: {}
          f:namespace: {}
          f:service-ca.crt: {}
          f:token: {}
      manager: kube-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/created-by: {}
            f:kubernetes.io/service-account.name: {}
            f:kubernetes.io/service-account.uid: {}
        f:type: {}
      manager: openshift-controller-manager
      operation: Update
      time: "2022-09-17T10:19:16Z"
    name: deployer-token-pb5r6
    namespace: install-troubleshoot
    resourceVersion: "71321"
    selfLink: /api/v1/namespaces/install-troubleshoot/secrets/deployer-token-pb5r6
    uid: e0982235-2a09-47e7-951f-96e34888ce0e
  type: kubernetes.io/service-account-token
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
